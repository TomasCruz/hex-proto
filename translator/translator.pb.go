// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: translator/translator.proto

package translator

import (
	scanner "github.com/TomasCruz/hex-proto/scanner"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LangMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LangMsg) Reset() {
	*x = LangMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangMsg) ProtoMessage() {}

func (x *LangMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangMsg.ProtoReflect.Descriptor instead.
func (*LangMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{0}
}

func (x *LangMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LangMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ArrLangMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []*LangMsg `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *ArrLangMsg) Reset() {
	*x = ArrLangMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrLangMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrLangMsg) ProtoMessage() {}

func (x *ArrLangMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrLangMsg.ProtoReflect.Descriptor instead.
func (*ArrLangMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{1}
}

func (x *ArrLangMsg) GetLanguages() []*LangMsg {
	if x != nil {
		return x.Languages
	}
	return nil
}

type CountMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountMsg) Reset() {
	*x = CountMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountMsg) ProtoMessage() {}

func (x *CountMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountMsg.ProtoReflect.Descriptor instead.
func (*CountMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{2}
}

func (x *CountMsg) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type HexLangMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HexID  int64 `protobuf:"varint,1,opt,name=hexID,proto3" json:"hexID,omitempty"`
	LangID int64 `protobuf:"varint,2,opt,name=langID,proto3" json:"langID,omitempty"`
}

func (x *HexLangMsg) Reset() {
	*x = HexLangMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HexLangMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HexLangMsg) ProtoMessage() {}

func (x *HexLangMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HexLangMsg.ProtoReflect.Descriptor instead.
func (*HexLangMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{3}
}

func (x *HexLangMsg) GetHexID() int64 {
	if x != nil {
		return x.HexID
	}
	return 0
}

func (x *HexLangMsg) GetLangID() int64 {
	if x != nil {
		return x.LangID
	}
	return 0
}

type HWLangMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HexLang *HexLangMsg `protobuf:"bytes,1,opt,name=hexLang,proto3" json:"hexLang,omitempty"`
	Order   int64       `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *HWLangMsg) Reset() {
	*x = HWLangMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWLangMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWLangMsg) ProtoMessage() {}

func (x *HWLangMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWLangMsg.ProtoReflect.Descriptor instead.
func (*HWLangMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{4}
}

func (x *HWLangMsg) GetHexLang() *HexLangMsg {
	if x != nil {
		return x.HexLang
	}
	return nil
}

func (x *HWLangMsg) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type HWTransMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwLang *HWLangMsg `protobuf:"bytes,1,opt,name=hwLang,proto3" json:"hwLang,omitempty"`
	Trans  string     `protobuf:"bytes,2,opt,name=trans,proto3" json:"trans,omitempty"`
}

func (x *HWTransMsg) Reset() {
	*x = HWTransMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWTransMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWTransMsg) ProtoMessage() {}

func (x *HWTransMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWTransMsg.ProtoReflect.Descriptor instead.
func (*HWTransMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{5}
}

func (x *HWTransMsg) GetHwLang() *HWLangMsg {
	if x != nil {
		return x.HwLang
	}
	return nil
}

func (x *HWTransMsg) GetTrans() string {
	if x != nil {
		return x.Trans
	}
	return ""
}

type TransMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HexLang *HexLangMsg `protobuf:"bytes,1,opt,name=hexLang,proto3" json:"hexLang,omitempty"`
	Trans   string      `protobuf:"bytes,2,opt,name=trans,proto3" json:"trans,omitempty"`
}

func (x *TransMsg) Reset() {
	*x = TransMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translator_translator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransMsg) ProtoMessage() {}

func (x *TransMsg) ProtoReflect() protoreflect.Message {
	mi := &file_translator_translator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransMsg.ProtoReflect.Descriptor instead.
func (*TransMsg) Descriptor() ([]byte, []int) {
	return file_translator_translator_proto_rawDescGZIP(), []int{6}
}

func (x *TransMsg) GetHexLang() *HexLangMsg {
	if x != nil {
		return x.HexLang
	}
	return nil
}

func (x *TransMsg) GetTrans() string {
	if x != nil {
		return x.Trans
	}
	return ""
}

var File_translator_translator_proto protoreflect.FileDescriptor

var file_translator_translator_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a,
	0x07, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0a,
	0x41, 0x72, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d,
	0x73, 0x67, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x20, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3a, 0x0a, 0x0a, 0x48, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x65, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x68, 0x65,
	0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x09, 0x48,
	0x57, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x65, 0x78, 0x4c,
	0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73,
	0x67, 0x52, 0x07, 0x68, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x51, 0x0a, 0x0a, 0x48, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2d,
	0x0a, 0x06, 0x68, 0x77, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x57, 0x4c, 0x61,
	0x6e, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x68, 0x77, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x07, 0x68, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x65,
	0x78, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x68, 0x65, 0x78, 0x4c, 0x61, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x32, 0xff, 0x04, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x72, 0x72, 0x4c, 0x61, 0x6e, 0x67,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x48, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x15,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x57, 0x4c, 0x61,
	0x6e, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x48, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x57, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x08, 0x57, 0x32, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x57, 0x32, 0x57, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x48, 0x65, 0x78, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12,
	0x14, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0c, 0x48, 0x65, 0x78, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x6f, 0x6d, 0x61, 0x73, 0x43, 0x72, 0x75,
	0x7a, 0x2f, 0x68, 0x65, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_translator_translator_proto_rawDescOnce sync.Once
	file_translator_translator_proto_rawDescData = file_translator_translator_proto_rawDesc
)

func file_translator_translator_proto_rawDescGZIP() []byte {
	file_translator_translator_proto_rawDescOnce.Do(func() {
		file_translator_translator_proto_rawDescData = protoimpl.X.CompressGZIP(file_translator_translator_proto_rawDescData)
	})
	return file_translator_translator_proto_rawDescData
}

var file_translator_translator_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_translator_translator_proto_goTypes = []interface{}{
	(*LangMsg)(nil),                    // 0: translator.LangMsg
	(*ArrLangMsg)(nil),                 // 1: translator.ArrLangMsg
	(*CountMsg)(nil),                   // 2: translator.CountMsg
	(*HexLangMsg)(nil),                 // 3: translator.HexLangMsg
	(*HWLangMsg)(nil),                  // 4: translator.HWLangMsg
	(*HWTransMsg)(nil),                 // 5: translator.HWTransMsg
	(*TransMsg)(nil),                   // 6: translator.TransMsg
	(*empty.Empty)(nil),                // 7: google.protobuf.Empty
	(*scanner.ArrTranslatableMsg)(nil), // 8: scanner.ArrTranslatableMsg
}
var file_translator_translator_proto_depIdxs = []int32{
	0,  // 0: translator.ArrLangMsg.languages:type_name -> translator.LangMsg
	3,  // 1: translator.HWLangMsg.hexLang:type_name -> translator.HexLangMsg
	4,  // 2: translator.HWTransMsg.hwLang:type_name -> translator.HWLangMsg
	3,  // 3: translator.TransMsg.hexLang:type_name -> translator.HexLangMsg
	7,  // 4: translator.Translator.Languages:input_type -> google.protobuf.Empty
	0,  // 5: translator.Translator.SetLanguage:input_type -> translator.LangMsg
	4,  // 6: translator.Translator.HWTrans:input_type -> translator.HWLangMsg
	5,  // 7: translator.Translator.SetHWTrans:input_type -> translator.HWTransMsg
	3,  // 8: translator.Translator.W2WTrans:input_type -> translator.HexLangMsg
	6,  // 9: translator.Translator.SetW2WTrans:input_type -> translator.TransMsg
	3,  // 10: translator.Translator.Trans:input_type -> translator.HexLangMsg
	6,  // 11: translator.Translator.SetTrans:input_type -> translator.TransMsg
	7,  // 12: translator.Translator.HexWordCount:input_type -> google.protobuf.Empty
	8,  // 13: translator.Translator.SetTranslatable:input_type -> scanner.ArrTranslatableMsg
	1,  // 14: translator.Translator.Languages:output_type -> translator.ArrLangMsg
	7,  // 15: translator.Translator.SetLanguage:output_type -> google.protobuf.Empty
	5,  // 16: translator.Translator.HWTrans:output_type -> translator.HWTransMsg
	7,  // 17: translator.Translator.SetHWTrans:output_type -> google.protobuf.Empty
	6,  // 18: translator.Translator.W2WTrans:output_type -> translator.TransMsg
	7,  // 19: translator.Translator.SetW2WTrans:output_type -> google.protobuf.Empty
	6,  // 20: translator.Translator.Trans:output_type -> translator.TransMsg
	7,  // 21: translator.Translator.SetTrans:output_type -> google.protobuf.Empty
	2,  // 22: translator.Translator.HexWordCount:output_type -> translator.CountMsg
	7,  // 23: translator.Translator.SetTranslatable:output_type -> google.protobuf.Empty
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_translator_translator_proto_init() }
func file_translator_translator_proto_init() {
	if File_translator_translator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_translator_translator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrLangMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HexLangMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWLangMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWTransMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translator_translator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_translator_translator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_translator_translator_proto_goTypes,
		DependencyIndexes: file_translator_translator_proto_depIdxs,
		MessageInfos:      file_translator_translator_proto_msgTypes,
	}.Build()
	File_translator_translator_proto = out.File
	file_translator_translator_proto_rawDesc = nil
	file_translator_translator_proto_goTypes = nil
	file_translator_translator_proto_depIdxs = nil
}
