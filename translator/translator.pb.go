// Code generated by protoc-gen-go. DO NOT EDIT.
// source: translator/translator.proto

package translator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LangMsg struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LangMsg) Reset()         { *m = LangMsg{} }
func (m *LangMsg) String() string { return proto.CompactTextString(m) }
func (*LangMsg) ProtoMessage()    {}
func (*LangMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{0}
}

func (m *LangMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LangMsg.Unmarshal(m, b)
}
func (m *LangMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LangMsg.Marshal(b, m, deterministic)
}
func (m *LangMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LangMsg.Merge(m, src)
}
func (m *LangMsg) XXX_Size() int {
	return xxx_messageInfo_LangMsg.Size(m)
}
func (m *LangMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LangMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LangMsg proto.InternalMessageInfo

func (m *LangMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LangMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ArrLangMsg struct {
	Languages            []*LangMsg `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArrLangMsg) Reset()         { *m = ArrLangMsg{} }
func (m *ArrLangMsg) String() string { return proto.CompactTextString(m) }
func (*ArrLangMsg) ProtoMessage()    {}
func (*ArrLangMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{1}
}

func (m *ArrLangMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrLangMsg.Unmarshal(m, b)
}
func (m *ArrLangMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrLangMsg.Marshal(b, m, deterministic)
}
func (m *ArrLangMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrLangMsg.Merge(m, src)
}
func (m *ArrLangMsg) XXX_Size() int {
	return xxx_messageInfo_ArrLangMsg.Size(m)
}
func (m *ArrLangMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrLangMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ArrLangMsg proto.InternalMessageInfo

func (m *ArrLangMsg) GetLanguages() []*LangMsg {
	if m != nil {
		return m.Languages
	}
	return nil
}

type HexLangMsg struct {
	HexID                int32    `protobuf:"varint,1,opt,name=hexID,proto3" json:"hexID,omitempty"`
	LangID               int32    `protobuf:"varint,2,opt,name=langID,proto3" json:"langID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HexLangMsg) Reset()         { *m = HexLangMsg{} }
func (m *HexLangMsg) String() string { return proto.CompactTextString(m) }
func (*HexLangMsg) ProtoMessage()    {}
func (*HexLangMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{2}
}

func (m *HexLangMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HexLangMsg.Unmarshal(m, b)
}
func (m *HexLangMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HexLangMsg.Marshal(b, m, deterministic)
}
func (m *HexLangMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HexLangMsg.Merge(m, src)
}
func (m *HexLangMsg) XXX_Size() int {
	return xxx_messageInfo_HexLangMsg.Size(m)
}
func (m *HexLangMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HexLangMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HexLangMsg proto.InternalMessageInfo

func (m *HexLangMsg) GetHexID() int32 {
	if m != nil {
		return m.HexID
	}
	return 0
}

func (m *HexLangMsg) GetLangID() int32 {
	if m != nil {
		return m.LangID
	}
	return 0
}

type HWLangMsg struct {
	HexLang              *HexLangMsg `protobuf:"bytes,1,opt,name=hexLang,proto3" json:"hexLang,omitempty"`
	Order                int32       `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HWLangMsg) Reset()         { *m = HWLangMsg{} }
func (m *HWLangMsg) String() string { return proto.CompactTextString(m) }
func (*HWLangMsg) ProtoMessage()    {}
func (*HWLangMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{3}
}

func (m *HWLangMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HWLangMsg.Unmarshal(m, b)
}
func (m *HWLangMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HWLangMsg.Marshal(b, m, deterministic)
}
func (m *HWLangMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HWLangMsg.Merge(m, src)
}
func (m *HWLangMsg) XXX_Size() int {
	return xxx_messageInfo_HWLangMsg.Size(m)
}
func (m *HWLangMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HWLangMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HWLangMsg proto.InternalMessageInfo

func (m *HWLangMsg) GetHexLang() *HexLangMsg {
	if m != nil {
		return m.HexLang
	}
	return nil
}

func (m *HWLangMsg) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type HWTransMsg struct {
	HwLang               *HWLangMsg `protobuf:"bytes,1,opt,name=hwLang,proto3" json:"hwLang,omitempty"`
	Grammar              string     `protobuf:"bytes,2,opt,name=grammar,proto3" json:"grammar,omitempty"`
	Trans                string     `protobuf:"bytes,3,opt,name=trans,proto3" json:"trans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HWTransMsg) Reset()         { *m = HWTransMsg{} }
func (m *HWTransMsg) String() string { return proto.CompactTextString(m) }
func (*HWTransMsg) ProtoMessage()    {}
func (*HWTransMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{4}
}

func (m *HWTransMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HWTransMsg.Unmarshal(m, b)
}
func (m *HWTransMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HWTransMsg.Marshal(b, m, deterministic)
}
func (m *HWTransMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HWTransMsg.Merge(m, src)
}
func (m *HWTransMsg) XXX_Size() int {
	return xxx_messageInfo_HWTransMsg.Size(m)
}
func (m *HWTransMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HWTransMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HWTransMsg proto.InternalMessageInfo

func (m *HWTransMsg) GetHwLang() *HWLangMsg {
	if m != nil {
		return m.HwLang
	}
	return nil
}

func (m *HWTransMsg) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

func (m *HWTransMsg) GetTrans() string {
	if m != nil {
		return m.Trans
	}
	return ""
}

type TransMsg struct {
	HexID                int32    `protobuf:"varint,1,opt,name=hexID,proto3" json:"hexID,omitempty"`
	Trans                string   `protobuf:"bytes,2,opt,name=trans,proto3" json:"trans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransMsg) Reset()         { *m = TransMsg{} }
func (m *TransMsg) String() string { return proto.CompactTextString(m) }
func (*TransMsg) ProtoMessage()    {}
func (*TransMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_356ab01a6fa627f4, []int{5}
}

func (m *TransMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransMsg.Unmarshal(m, b)
}
func (m *TransMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransMsg.Marshal(b, m, deterministic)
}
func (m *TransMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransMsg.Merge(m, src)
}
func (m *TransMsg) XXX_Size() int {
	return xxx_messageInfo_TransMsg.Size(m)
}
func (m *TransMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TransMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TransMsg proto.InternalMessageInfo

func (m *TransMsg) GetHexID() int32 {
	if m != nil {
		return m.HexID
	}
	return 0
}

func (m *TransMsg) GetTrans() string {
	if m != nil {
		return m.Trans
	}
	return ""
}

func init() {
	proto.RegisterType((*LangMsg)(nil), "translator.LangMsg")
	proto.RegisterType((*ArrLangMsg)(nil), "translator.ArrLangMsg")
	proto.RegisterType((*HexLangMsg)(nil), "translator.HexLangMsg")
	proto.RegisterType((*HWLangMsg)(nil), "translator.HWLangMsg")
	proto.RegisterType((*HWTransMsg)(nil), "translator.HWTransMsg")
	proto.RegisterType((*TransMsg)(nil), "translator.TransMsg")
}

func init() { proto.RegisterFile("translator/translator.proto", fileDescriptor_356ab01a6fa627f4) }

var fileDescriptor_356ab01a6fa627f4 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0x4d, 0x7c, 0x51, 0x73, 0x7d, 0xbc, 0xc5, 0x3c, 0x9f, 0x84, 0xb8, 0x91, 0x59, 0xb9,
	0x31, 0xbe, 0xa6, 0xd0, 0x82, 0xb4, 0x95, 0x52, 0x0b, 0x11, 0xec, 0x26, 0x11, 0xb2, 0x1e, 0xc9,
	0x34, 0x4a, 0x4d, 0x46, 0xc6, 0x91, 0xda, 0xcf, 0xd6, 0x2f, 0x57, 0xf2, 0x67, 0x92, 0x08, 0xb1,
	0x8b, 0xee, 0xe6, 0xde, 0x9c, 0xdf, 0x39, 0x37, 0xf7, 0xc2, 0x40, 0x70, 0x12, 0x1f, 0x76, 0x44,
	0x30, 0x3e, 0x29, 0x9f, 0xd6, 0x9e, 0x33, 0xc1, 0x10, 0x94, 0x1d, 0x73, 0x10, 0x32, 0x16, 0xee,
	0xe8, 0x24, 0xfd, 0xb2, 0x3e, 0xbe, 0x4e, 0x68, 0xb4, 0x17, 0x1f, 0x99, 0x10, 0x8f, 0xa1, 0xbd,
	0x24, 0x71, 0xf8, 0x72, 0x08, 0xd1, 0x1f, 0x50, 0xb7, 0x81, 0xa1, 0x0c, 0x95, 0x91, 0xe6, 0xaa,
	0xdb, 0x00, 0x21, 0xf8, 0x15, 0x93, 0x88, 0x1a, 0xea, 0x50, 0x19, 0xe9, 0x6e, 0xfa, 0xc6, 0x33,
	0x80, 0x47, 0xce, 0x25, 0x71, 0x05, 0xfa, 0x8e, 0xc4, 0xe1, 0x91, 0x84, 0xf4, 0x60, 0x28, 0xc3,
	0xe6, 0xa8, 0x6b, 0xff, 0xb5, 0x2a, 0xb3, 0xe4, 0x3a, 0xb7, 0x54, 0xe1, 0x29, 0x80, 0x43, 0x4f,
	0xd2, 0xa0, 0x07, 0xda, 0x86, 0x9e, 0x16, 0xf3, 0x3c, 0x35, 0x2b, 0x50, 0x1f, 0x5a, 0x09, 0xb0,
	0x98, 0xa7, 0xd1, 0x9a, 0x9b, 0x57, 0xd8, 0x03, 0xdd, 0xf1, 0x25, 0xfa, 0x1f, 0xda, 0x9b, 0xcc,
	0x28, 0x85, 0xbb, 0x76, 0xbf, 0x9a, 0x5c, 0x66, 0xb8, 0x52, 0x96, 0x84, 0x31, 0x1e, 0x50, 0x9e,
	0xbb, 0x66, 0x05, 0x7e, 0x03, 0x70, 0xfc, 0x55, 0x42, 0x26, 0xae, 0x63, 0x68, 0x6d, 0xde, 0x2b,
	0xa6, 0xff, 0xce, 0x4c, 0x65, 0xb8, 0x9b, 0x8b, 0x90, 0x01, 0xed, 0x90, 0x93, 0x28, 0x22, 0x3c,
	0xdf, 0x92, 0x2c, 0x93, 0xb0, 0x94, 0x34, 0x9a, 0x69, 0x3f, 0x2b, 0xf0, 0x0d, 0x74, 0x8a, 0xa8,
	0xfa, 0x7f, 0x2f, 0x38, 0xb5, 0xc2, 0xd9, 0x9f, 0x4d, 0x80, 0x55, 0x31, 0x08, 0xba, 0x07, 0x7d,
	0x29, 0x37, 0x8a, 0xfa, 0x56, 0x76, 0x5f, 0x4b, 0xde, 0xd7, 0x7a, 0x4e, 0xee, 0x6b, 0x9e, 0xed,
	0xa3, 0x3c, 0x1a, 0x6e, 0xa0, 0x3b, 0xe8, 0x7a, 0x54, 0x48, 0x07, 0x54, 0x77, 0x32, 0xf3, 0x82,
	0x2b, 0x6e, 0xa0, 0x19, 0xfc, 0x76, 0xe8, 0xc9, 0x67, 0x3c, 0x78, 0x62, 0xc7, 0x58, 0xa0, 0xfa,
	0x15, 0x9d, 0xc7, 0x97, 0x1b, 0xc6, 0x0d, 0xf4, 0x00, 0xe0, 0x51, 0x91, 0xb7, 0xd0, 0x05, 0xdd,
	0x37, 0x03, 0x4c, 0xa1, 0xe3, 0xdb, 0xb5, 0x74, 0x71, 0x74, 0xb3, 0x57, 0xed, 0x57, 0xb2, 0x6f,
	0x41, 0xfb, 0x19, 0x38, 0x85, 0x8e, 0x47, 0x45, 0xc6, 0xd6, 0x6a, 0x2e, 0x0f, 0xbc, 0x6e, 0xa5,
	0x9d, 0xeb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xc5, 0x42, 0xcb, 0xb2, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TranslatorClient is the client API for Translator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranslatorClient interface {
	Languages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArrLangMsg, error)
	SetLanguage(ctx context.Context, in *LangMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	HexWordCount(ctx context.Context, in *HWLangMsg, opts ...grpc.CallOption) (*HWTransMsg, error)
	SetHWTrans(ctx context.Context, in *HWTransMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	W2WTrans(ctx context.Context, in *HexLangMsg, opts ...grpc.CallOption) (*TransMsg, error)
	Trans(ctx context.Context, in *HexLangMsg, opts ...grpc.CallOption) (*TransMsg, error)
	SetTrans(ctx context.Context, in *TransMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type translatorClient struct {
	cc *grpc.ClientConn
}

func NewTranslatorClient(cc *grpc.ClientConn) TranslatorClient {
	return &translatorClient{cc}
}

func (c *translatorClient) Languages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArrLangMsg, error) {
	out := new(ArrLangMsg)
	err := c.cc.Invoke(ctx, "/translator.Translator/Languages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) SetLanguage(ctx context.Context, in *LangMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/translator.Translator/SetLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) HexWordCount(ctx context.Context, in *HWLangMsg, opts ...grpc.CallOption) (*HWTransMsg, error) {
	out := new(HWTransMsg)
	err := c.cc.Invoke(ctx, "/translator.Translator/HexWordCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) SetHWTrans(ctx context.Context, in *HWTransMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/translator.Translator/SetHWTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) W2WTrans(ctx context.Context, in *HexLangMsg, opts ...grpc.CallOption) (*TransMsg, error) {
	out := new(TransMsg)
	err := c.cc.Invoke(ctx, "/translator.Translator/W2WTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) Trans(ctx context.Context, in *HexLangMsg, opts ...grpc.CallOption) (*TransMsg, error) {
	out := new(TransMsg)
	err := c.cc.Invoke(ctx, "/translator.Translator/Trans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) SetTrans(ctx context.Context, in *TransMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/translator.Translator/SetTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslatorServer is the server API for Translator service.
type TranslatorServer interface {
	Languages(context.Context, *empty.Empty) (*ArrLangMsg, error)
	SetLanguage(context.Context, *LangMsg) (*empty.Empty, error)
	HexWordCount(context.Context, *HWLangMsg) (*HWTransMsg, error)
	SetHWTrans(context.Context, *HWTransMsg) (*empty.Empty, error)
	W2WTrans(context.Context, *HexLangMsg) (*TransMsg, error)
	Trans(context.Context, *HexLangMsg) (*TransMsg, error)
	SetTrans(context.Context, *TransMsg) (*empty.Empty, error)
}

// UnimplementedTranslatorServer can be embedded to have forward compatible implementations.
type UnimplementedTranslatorServer struct {
}

func (*UnimplementedTranslatorServer) Languages(ctx context.Context, req *empty.Empty) (*ArrLangMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Languages not implemented")
}
func (*UnimplementedTranslatorServer) SetLanguage(ctx context.Context, req *LangMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLanguage not implemented")
}
func (*UnimplementedTranslatorServer) HexWordCount(ctx context.Context, req *HWLangMsg) (*HWTransMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HexWordCount not implemented")
}
func (*UnimplementedTranslatorServer) SetHWTrans(ctx context.Context, req *HWTransMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHWTrans not implemented")
}
func (*UnimplementedTranslatorServer) W2WTrans(ctx context.Context, req *HexLangMsg) (*TransMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method W2WTrans not implemented")
}
func (*UnimplementedTranslatorServer) Trans(ctx context.Context, req *HexLangMsg) (*TransMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trans not implemented")
}
func (*UnimplementedTranslatorServer) SetTrans(ctx context.Context, req *TransMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrans not implemented")
}

func RegisterTranslatorServer(s *grpc.Server, srv TranslatorServer) {
	s.RegisterService(&_Translator_serviceDesc, srv)
}

func _Translator_Languages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).Languages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/Languages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).Languages(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_SetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).SetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/SetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).SetLanguage(ctx, req.(*LangMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_HexWordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HWLangMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).HexWordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/HexWordCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).HexWordCount(ctx, req.(*HWLangMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_SetHWTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HWTransMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).SetHWTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/SetHWTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).SetHWTrans(ctx, req.(*HWTransMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_W2WTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexLangMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).W2WTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/W2WTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).W2WTrans(ctx, req.(*HexLangMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_Trans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexLangMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).Trans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/Trans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).Trans(ctx, req.(*HexLangMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_SetTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).SetTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translator.Translator/SetTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).SetTrans(ctx, req.(*TransMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Translator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "translator.Translator",
	HandlerType: (*TranslatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Languages",
			Handler:    _Translator_Languages_Handler,
		},
		{
			MethodName: "SetLanguage",
			Handler:    _Translator_SetLanguage_Handler,
		},
		{
			MethodName: "HexWordCount",
			Handler:    _Translator_HexWordCount_Handler,
		},
		{
			MethodName: "SetHWTrans",
			Handler:    _Translator_SetHWTrans_Handler,
		},
		{
			MethodName: "W2WTrans",
			Handler:    _Translator_W2WTrans_Handler,
		},
		{
			MethodName: "Trans",
			Handler:    _Translator_Trans_Handler,
		},
		{
			MethodName: "SetTrans",
			Handler:    _Translator_SetTrans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translator/translator.proto",
}
