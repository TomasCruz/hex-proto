// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scanner/scanner.proto

package scanner

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RangeMsg struct {
	Start                int32    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  int32    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeMsg) Reset()         { *m = RangeMsg{} }
func (m *RangeMsg) String() string { return proto.CompactTextString(m) }
func (*RangeMsg) ProtoMessage()    {}
func (*RangeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c85bb07bffd332d8, []int{0}
}

func (m *RangeMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeMsg.Unmarshal(m, b)
}
func (m *RangeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeMsg.Marshal(b, m, deterministic)
}
func (m *RangeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeMsg.Merge(m, src)
}
func (m *RangeMsg) XXX_Size() int {
	return xxx_messageInfo_RangeMsg.Size(m)
}
func (m *RangeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RangeMsg proto.InternalMessageInfo

func (m *RangeMsg) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RangeMsg) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type HexameterMsg struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Para                 bool     `protobuf:"varint,2,opt,name=para,proto3" json:"para,omitempty"`
	Txt                  string   `protobuf:"bytes,3,opt,name=txt,proto3" json:"txt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HexameterMsg) Reset()         { *m = HexameterMsg{} }
func (m *HexameterMsg) String() string { return proto.CompactTextString(m) }
func (*HexameterMsg) ProtoMessage()    {}
func (*HexameterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c85bb07bffd332d8, []int{1}
}

func (m *HexameterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HexameterMsg.Unmarshal(m, b)
}
func (m *HexameterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HexameterMsg.Marshal(b, m, deterministic)
}
func (m *HexameterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HexameterMsg.Merge(m, src)
}
func (m *HexameterMsg) XXX_Size() int {
	return xxx_messageInfo_HexameterMsg.Size(m)
}
func (m *HexameterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HexameterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HexameterMsg proto.InternalMessageInfo

func (m *HexameterMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HexameterMsg) GetPara() bool {
	if m != nil {
		return m.Para
	}
	return false
}

func (m *HexameterMsg) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

type HexMsg struct {
	Hexes                []*HexameterMsg `protobuf:"bytes,1,rep,name=hexes,proto3" json:"hexes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HexMsg) Reset()         { *m = HexMsg{} }
func (m *HexMsg) String() string { return proto.CompactTextString(m) }
func (*HexMsg) ProtoMessage()    {}
func (*HexMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c85bb07bffd332d8, []int{2}
}

func (m *HexMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HexMsg.Unmarshal(m, b)
}
func (m *HexMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HexMsg.Marshal(b, m, deterministic)
}
func (m *HexMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HexMsg.Merge(m, src)
}
func (m *HexMsg) XXX_Size() int {
	return xxx_messageInfo_HexMsg.Size(m)
}
func (m *HexMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HexMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HexMsg proto.InternalMessageInfo

func (m *HexMsg) GetHexes() []*HexameterMsg {
	if m != nil {
		return m.Hexes
	}
	return nil
}

func init() {
	proto.RegisterType((*RangeMsg)(nil), "scanner.RangeMsg")
	proto.RegisterType((*HexameterMsg)(nil), "scanner.HexameterMsg")
	proto.RegisterType((*HexMsg)(nil), "scanner.HexMsg")
}

func init() { proto.RegisterFile("scanner/scanner.proto", fileDescriptor_c85bb07bffd332d8) }

var fileDescriptor_c85bb07bffd332d8 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xcd, 0x4a, 0xc5, 0x30,
	0x14, 0x84, 0x4d, 0x63, 0x6b, 0x3d, 0x8a, 0x3f, 0xc1, 0x42, 0x70, 0x55, 0xb2, 0x2a, 0x08, 0x55,
	0x2a, 0xe2, 0x0b, 0x08, 0x66, 0xd3, 0x4d, 0xde, 0x20, 0xda, 0x43, 0xed, 0xc2, 0xb4, 0x24, 0x59,
	0xe4, 0xf1, 0x2f, 0x49, 0xdb, 0x4b, 0x57, 0x99, 0x19, 0xf2, 0x4d, 0x32, 0x50, 0xb9, 0x5f, 0x6d,
	0x0c, 0xda, 0xd7, 0xed, 0x6c, 0x17, 0x3b, 0xfb, 0x99, 0x5d, 0x6d, 0x56, 0x74, 0x50, 0x2a, 0x6d,
	0x46, 0xec, 0xdd, 0xc8, 0x9e, 0x20, 0x77, 0x5e, 0x5b, 0xcf, 0x49, 0x4d, 0x9a, 0x5c, 0xad, 0x86,
	0x3d, 0x00, 0x45, 0x33, 0xf0, 0x2c, 0x65, 0x51, 0x8a, 0x2f, 0xb8, 0x95, 0x18, 0xf4, 0x3f, 0x7a,
	0xb4, 0x91, 0xbb, 0x83, 0x6c, 0x1a, 0x36, 0x28, 0x9b, 0x06, 0xc6, 0xe0, 0x72, 0xd1, 0x56, 0x27,
	0xa4, 0x54, 0x49, 0xc7, 0x16, 0x1f, 0x3c, 0xa7, 0x35, 0x69, 0xae, 0x55, 0x94, 0xe2, 0x03, 0x0a,
	0x89, 0x21, 0xf2, 0x2f, 0x90, 0xff, 0x61, 0x40, 0xc7, 0x49, 0x4d, 0x9b, 0x9b, 0xae, 0x6a, 0xf7,
	0xbf, 0x1e, 0x5f, 0x51, 0xeb, 0x9d, 0xee, 0x13, 0xa8, 0xc4, 0xc0, 0xde, 0xa0, 0xfc, 0x46, 0x2f,
	0x63, 0xc4, 0x1e, 0xcf, 0xc0, 0x3e, 0xe5, 0xf9, 0xfe, 0xd8, 0xd1, 0xbb, 0x51, 0x5c, 0xfc, 0x14,
	0x69, 0xf9, 0xfb, 0x29, 0x00, 0x00, 0xff, 0xff, 0x10, 0x42, 0x4b, 0xb7, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HexClient is the client API for Hex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HexClient interface {
	GetHexes(ctx context.Context, in *RangeMsg, opts ...grpc.CallOption) (*HexMsg, error)
}

type hexClient struct {
	cc *grpc.ClientConn
}

func NewHexClient(cc *grpc.ClientConn) HexClient {
	return &hexClient{cc}
}

func (c *hexClient) GetHexes(ctx context.Context, in *RangeMsg, opts ...grpc.CallOption) (*HexMsg, error) {
	out := new(HexMsg)
	err := c.cc.Invoke(ctx, "/scanner.Hex/GetHexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HexServer is the server API for Hex service.
type HexServer interface {
	GetHexes(context.Context, *RangeMsg) (*HexMsg, error)
}

// UnimplementedHexServer can be embedded to have forward compatible implementations.
type UnimplementedHexServer struct {
}

func (*UnimplementedHexServer) GetHexes(ctx context.Context, req *RangeMsg) (*HexMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHexes not implemented")
}

func RegisterHexServer(s *grpc.Server, srv HexServer) {
	s.RegisterService(&_Hex_serviceDesc, srv)
}

func _Hex_GetHexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexServer).GetHexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scanner.Hex/GetHexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexServer).GetHexes(ctx, req.(*RangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.Hex",
	HandlerType: (*HexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHexes",
			Handler:    _Hex_GetHexes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/scanner.proto",
}
